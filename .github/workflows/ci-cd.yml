name: EarthCare Network CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: earthcare-network

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: earthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.5.0'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run linting
      run: yarn lint

    - name: Run type checking
      run: yarn type-check

    - name: Build packages
      run: yarn build

    - name: Run tests
      env:
        PG_DATABASE_URL: postgres://postgres:test_password@localhost:5432/earthcare_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
      run: |
        yarn test:unit
        yarn test:integration

    - name: Run E2E tests
      env:
        PG_DATABASE_URL: postgres://postgres:test_password@localhost:5432/earthcare_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
      run: yarn test:e2e

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push CRM image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/twenty-server/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository }}/crm:latest
          ${{ env.REGISTRY }}/${{ github.repository }}/crm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Directory image
      uses: docker/build-push-action@v5
      with:
        context: ./directory
        file: ./directory/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository }}/directory:latest
          ${{ env.REGISTRY }}/${{ github.repository }}/directory:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Dokploy
      env:
        DOKPLOY_SERVER: ${{ secrets.DOKPLOY_SERVER }}
        DOKPLOY_TOKEN: ${{ secrets.DOKPLOY_TOKEN }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # Install Dokploy CLI
        curl -sSL https://dokploy.com/cli.sh | sh
        
        # Deploy to production
        dokploy deploy \
          --server $DOKPLOY_SERVER \
          --token $DOKPLOY_TOKEN \
          --project earthcare-network \
          --image ${{ env.REGISTRY }}/${{ github.repository }}/crm:${{ github.sha }}

    - name: Run deployment health checks
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Health check CRM
        curl -f https://crm.app.earthcare.network/health || exit 1
        
        # Health check Directory
        curl -f https://app.earthcare.network/ || exit 1
        
        # Test workspace subdomain (should work after DNS propagation)
        curl -f https://app.crm.app.earthcare.network/ || echo "Workspace subdomain not ready yet"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'